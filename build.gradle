plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}


group = 'ru.tbank'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

tasks {
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'
}
test {
    useJUnitPlatform()
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.3.4'

    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.24.0'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation files('libs/logging-starter-1.0.jar')
    implementation 'org.slf4j:slf4j-api:1.7.36'

    testImplementation 'org.testcontainers:junit-jupiter:1.20.0'
    testImplementation 'junit:junit:4.13.1'
    implementation 'io.rest-assured:rest-assured:5.5.0'
    implementation 'io.rest-assured:xml-path:5.5.0'
    implementation 'io.rest-assured:json-path:5.5.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.wiremock:wiremock-standalone:3.6.0'
    testImplementation 'org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-13'
    testImplementation "org.testcontainers:postgresql:1.20.0"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.liquibase:liquibase-core'
    runtimeOnly 'org.liquibase.ext:liquibase-hibernate5:4.20.0'
}
jacoco {
    toolVersion = "0.8.7"
}

test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/entities/**', '**/dto/**']) // исключить DTO
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
